{
	"name": "vue-lang-extension",
	"displayName": "vue-lang-extension",
	"description": "vue single file component support for vscode",
	"version": "0.0.1",
	"private": true,
	"publisher": "ventilador",
	"main": "extension/dist/extension.js",
	"workspaces": [
		"extension",
		"plugin"
	],
	"scripts": {
		"ts-node": "node ./bin/ts-node",
		"play": "yarn ts-node bin/playground.ts",
		"all": "node bin/workspaces",
		"vscode:prepublish": "yarn run compile",
		"compile": "tsc -b",
		"watch": "tsc -b -w",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"test": "yarn run compile && node ./node_modules/vscode/bin/test",
		"clean": "rimraf node_modules dist",
		"cleand": "rimraf dist"
	},
	"engines": {
		"vscode": "^1.36.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onLanguage:vue"
	],
	"devDependencies": {
		"@types/fs-extra": "^7.0.0",
		"fs-extra": "^8.0.1",
		"tree-kill": "^1.2.1",
		"ts-node": "^8.2.0"
	},
	"contributes": {
		"breakpoints": [
			{
				"language": "vue"
			}
		],
		"typescriptServerPlugins": [
			{
				"name": "@vue-lang/plugin",
				"languages": [
					"vue"
				]
			}
		],
		"languages": [
			{
				"id": "vue",
				"extensions": [
					".vue"
				],
				"aliases": [
					"Vue SFC"
				],
				"mimetypes": [],
				"configuration": "./lang/vue-language-configuration.json"
			}
		],
		"configuration": {
			"title": "Vue-lang",
			"properties": {
				"typescript-plugins.suggest.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable the usage of intellisense."
				},
				"typescript-plugins.format.enable": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable the vue document formatter."
				},
				"typescript-plugins.implementationsCodeLens.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable the vue document implementations CodeLens helper"
				},
				"typescript-plugins.suggest.completeJSDocs": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable the vue document suggestions for jsDocs."
				},
				"typescript-plugins.referencesCodeLens.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable the vue document references CodeLens helper."
				},
				"typescript-plugins.autoClosingTags": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable the vue document auto closing tags."
				},
				"typescript-plugins.completion.autoImport": {
					"type": "boolean",
					"default": true,
					"description": "Include completion for module export and auto import them"
				},
				"typescript-plugins.completion.useScaffoldSnippets": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable vue's built-in scaffolding snippets"
				},
				"typescript-plugins.completion.tagCasing": {
					"type": "string",
					"default": "kebab",
					"enum": [
						"initial",
						"kebab"
					],
					"enumDescriptions": [
						"use the key in `components: {...}` as is for tag completion and do not force any casing",
						"kebab-case completion for <my-tag>"
					],
					"description": "Casing conversion for tag completion"
				},
				"typescript-plugins.grammar.customBlocks": {
					"type": "object",
					"default": {
						"docs": "md",
						"i18n": "json"
					},
					"description": "Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks."
				},
				"typescript-plugins.validation.template": {
					"type": "boolean",
					"default": true,
					"description": "Validate vue-html in <template> using eslint-plugin-vue"
				},
				"typescript-plugins.validation.style": {
					"type": "boolean",
					"default": true,
					"description": "Validate css/scss/less/postcss in <style>"
				},
				"typescript-plugins.validation.script": {
					"type": "boolean",
					"default": true,
					"description": "Validate js/ts in <script>"
				},
				"typescript-plugins.format.options.tabSize": {
					"type": "number",
					"default": 2,
					"description": "Number of spaces per indentation level. Inherited by all formatters."
				},
				"typescript-plugins.format.options.useTabs": {
					"type": "boolean",
					"default": false,
					"description": "Use tabs for indentation. Inherited by all formatters."
				},
				"typescript-plugins.format.defaultFormatter.html": {
					"type": "string",
					"default": "prettyhtml",
					"enum": [
						"none",
						"prettyhtml",
						"js-beautify-html",
						"prettier"
					],
					"enumDescriptions": [
						"disable formatting",
						"prettyhtml",
						"html formatter of js-beautify",
						"prettier"
					],
					"description": "Default formatter for <template> region"
				},
				"typescript-plugins.format.defaultFormatter.css": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier"
					],
					"enumDescriptions": [
						"disable formatting",
						"css formatter using css parser from prettier"
					],
					"description": "Default formatter for <style> region"
				},
				"typescript-plugins.format.defaultFormatter.postcss": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier"
					],
					"enumDescriptions": [
						"disable formatting",
						"postcss formatter using css parser from prettier"
					],
					"description": "Default formatter for <style lang='postcss'> region"
				},
				"typescript-plugins.format.defaultFormatter.scss": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier"
					],
					"enumDescriptions": [
						"disable formatting",
						"scss formatter using scss parser from prettier"
					],
					"description": "Default formatter for <style lang='scss'> region"
				},
				"typescript-plugins.format.defaultFormatter.less": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier"
					],
					"enumDescriptions": [
						"disable formatting",
						"less formatter using postcss parser from prettier"
					],
					"description": "Default formatter for <style lang='less'> region"
				},
				"typescript-plugins.format.defaultFormatter.stylus": {
					"type": "string",
					"default": "stylus-supremacy",
					"enum": [
						"none",
						"stylus-supremacy"
					],
					"enumDescriptions": [
						"disable formatting",
						"stylus formatter from stylus-supremacy"
					],
					"description": "Default formatter for <style lang='stylus'> region"
				},
				"typescript-plugins.format.defaultFormatter.js": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier",
						"prettier-eslint",
						"vscode-typescript"
					],
					"enumDescriptions": [
						"disable formatting",
						"js formatter from prettier",
						"prettier-eslint",
						"js formatter from TypeScript"
					],
					"description": "Default formatter for <script> region"
				},
				"typescript-plugins.format.defaultFormatter.ts": {
					"type": "string",
					"default": "prettier",
					"enum": [
						"none",
						"prettier",
						"vscode-typescript"
					],
					"enumDescriptions": [
						"disable formatting",
						"ts formatter using typescript parser from prettier",
						"ts formatter from TypeScript"
					],
					"description": "Default formatter for <script> region"
				},
				"typescript-plugins.format.defaultFormatterOptions": {
					"type": "object",
					"properties": {
						"prettier": {
							"type": "object",
							"description": "Global prettier config used by prettier formatter. Used by `prettier` and `prettier-eslint`.\n\nvue will prefer a prettier config file at home directory if one exists.",
							"properties": {}
						},
						"prettyhtml": {
							"type": "object",
							"description": "Options for prettyhtml",
							"properties": {
								"printWidth": {
									"type": "number",
									"default": 100,
									"description": "Maximum amount of characters allowed per line"
								},
								"singleQuote": {
									"type": "boolean",
									"default": false,
									"description": "Whether to use single quotes by default"
								},
								"wrapAttributes": {
									"type": "boolean",
									"default": false,
									"description": "Whether to wrap attributes"
								},
								"sortAttributes": {
									"type": "boolean",
									"default": false,
									"description": "Whether to sort attributes"
								}
							}
						},
						"js-beautify-html": {
							"type": "object",
							"description": "Options for js-beautify"
						}
					},
					"default": {
						"js-beautify-html": {
							"wrap_attributes": "force-expand-multiline"
						},
						"prettyhtml": {
							"printWidth": 100,
							"singleQuote": false,
							"wrapAttributes": false,
							"sortAttributes": false
						}
					},
					"description": "Options for all default formatters"
				},
				"typescript-plugins.format.styleInitialIndent": {
					"type": "boolean",
					"default": false,
					"description": "Whether to have initial indent for <style> region"
				},
				"typescript-plugins.format.scriptInitialIndent": {
					"type": "boolean",
					"default": false,
					"description": "Whether to have initial indent for <script> region"
				},
				"typescript-plugins.trace.server": {
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and Vue Language Server."
				},
				"typescript-plugins.dev.vlsPath": {
					"type": "string",
					"description": "Path to VLS for vue developers. There are two ways of using it. \n\n1. Clone vuejs/vue from GitHub, build it and point it to the ABSOLUTE path of `/server`.\n2. `yarn global add vue-language-server` and point vue to the installed location (`yarn global dir` + node_modules/vue-language-server)"
				},
				"typescript-plugins.dev.vlsPort": {
					"type": "number",
					"description": "The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.",
					"default": -1
				},
				"typescript-plugins.experimental.templateInterpolationService": {
					"type": "boolean",
					"default": false,
					"description": "Enable template interpolation service that offers diagnostics / hover / definition / references."
				}
			}
		},
		"grammars": [
			{
				"language": "vue",
				"scopeName": "source.vue",
				"path": "./syntaxes/vue-generated.json",
				"embeddedLanguages": {
					"text.html.basic": "html",
					"text.html.vue-html": "vue-html",
					"text.jade.slm": "slm",
					"text.pug": "jade",
					"text.haml": "haml",
					"text.html.liquid": "liquid",
					"source.css": "css",
					"source.css.scss": "scss",
					"source.css.less": "less",
					"source.css.postcss": "vue-postcss",
					"source.sass": "sass",
					"source.stylus": "stylus",
					"source.js": "javascript",
					"source.ts": "typescript",
					"source.coffee": "coffeescript",
					"text.html.markdown": "md",
					"source.yaml": "yaml",
					"source.json": "json",
					"source.php": "php",
					"source.graphql": "graphql"
				}
			},
			{
				"language": "vue-postcss",
				"scopeName": "source.css.postcss",
				"path": "./syntaxes/vue-postcss.json"
			},
			{
				"language": "vue-html",
				"scopeName": "text.html.vue-html",
				"path": "./syntaxes/vue-html.tmLanguage.json",
				"embeddedLanguages": {
					"source.js": "javascript"
				}
			},
			{
				"path": "./syntaxes/pug/directives.tmLanguage.json",
				"scopeName": "typescript-plugins.pug.directives",
				"injectTo": [
					"source.vue"
				]
			},
			{
				"path": "./syntaxes/pug/interpolations.tmLanguage.json",
				"scopeName": "typescript-plugins.pug.interpolations",
				"injectTo": [
					"source.vue"
				]
			}
		]
	}
}